{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/archer/source/404.md","path":"404.md","modified":0,"renderable":1},{"_id":"source/image/round.gif","path":"image/round.gif","modified":0,"renderable":0},{"_id":"source/image/segment.gif","path":"image/segment.gif","modified":0,"renderable":0},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"source/image/line.gif","path":"image/line.gif","modified":0,"renderable":0},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404.jpg","path":"intro/404.jpg","modified":0,"renderable":1},{"_id":"source/image/ios.gif","path":"image/ios.gif","modified":0,"renderable":0},{"_id":"themes/archer/source/avatar/avatar_android.png","path":"avatar/avatar_android.png","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-page.jpg","path":"intro/about-page.jpg","modified":0,"renderable":1},{"_id":"source/image/view.gif","path":"image/view.gif","modified":0,"renderable":0},{"_id":"themes/archer/source/intro/intro-desktop.jpg","path":"intro/intro-desktop.jpg","modified":0,"renderable":1},{"_id":"source/image/circle.gif","path":"image/circle.gif","modified":0,"renderable":0},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/bg.png","path":"avatar/bg.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"93eaaf1b7e2f5c20397e06951a56fdbb8bdbcccc","modified":1516190198000},{"_id":"source/CNAME","hash":"bb5ff69beff765ec678d157cff058443032ab0e9","modified":1516190198000},{"_id":"themes/archer/.eslintrc.json","hash":"0b783f7a1f19b35b1bad93cb3ed3eab0360120bb","modified":1516190198000},{"_id":"themes/archer/.gitignore","hash":"55cbfa5bcac7f7bb37b3dcd03aa88a80f41b77ed","modified":1516190198000},{"_id":"themes/archer/.jsbeautifyrc","hash":"752fb6f7c8f9c8ce2549ec61abcf06191db02545","modified":1516190198000},{"_id":"themes/archer/LICENSE","hash":"8b95aa94f32f074348eee0909d779d97d6ca114d","modified":1516190198000},{"_id":"themes/archer/README.md","hash":"b3ba5ff8545cf88cc0730477b05563a5adb21c92","modified":1516190198000},{"_id":"themes/archer/_config.yml","hash":"d3271d0594d3238d303b3be53570d477b89337df","modified":1516190198000},{"_id":"themes/archer/gulpfile.js","hash":"2c0b72eba3240a603507744f8c3215f1c2f64154","modified":1516190198000},{"_id":"themes/archer/package.json","hash":"216017d24df564fdac83c4fc8fb01b646b307940","modified":1516190198000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1516190198000},{"_id":"source/_posts/再见2017.md","hash":"2777605e5b54a1f45453f0c3de11e7614465d8d6","modified":1516190198000},{"_id":"source/_posts/神奇的canvas.md","hash":"f56111f22f6844406695eb6ad1d4a6ed92134c41","modified":1516190198000},{"_id":"source/_posts/神奇的canvas之Android&iOS.md","hash":"967be9aa8ea1a6d42ea291766fc88352d60a8ffd","modified":1516190198000},{"_id":"source/about/index.md","hash":"11908608f5fde6f6fb6b82068ae2e311df9502cc","modified":1516190198000},{"_id":"themes/archer/docs/README-en.md","hash":"02303d4b4a79fa9e41ae11bd6d251d2f55bd23e0","modified":1516190198000},{"_id":"themes/archer/docs/develop-guide.md","hash":"966425c5b645ba631bb9e9c062353dc60161bb47","modified":1516190198000},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1516190198000},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1516190198000},{"_id":"themes/archer/layout/index.ejs","hash":"e7a1e50ff41456701af2c2778758b35b69dc0e08","modified":1516190198000},{"_id":"themes/archer/layout/js-info.ejs","hash":"fd44406e1c5a5c89de4e8639504b50ed17364ade","modified":1516190198000},{"_id":"themes/archer/layout/layout.ejs","hash":"2b21ba7a00f9c7869aebf909e567d50a7b217a53","modified":1516190198000},{"_id":"themes/archer/layout/post.ejs","hash":"d739fd99241619a0dbdd73d544dc20fb50c88b96","modified":1516190198000},{"_id":"themes/archer/source/404.md","hash":"577791aa24ecec4b33d17acca505d4e0849bfc02","modified":1516190198000},{"_id":"source/image/round.gif","hash":"c0024791c0a3464f90d5d20210332fe370da2265","modified":1516190198000},{"_id":"source/image/segment.gif","hash":"4da47c84794dbc1af747fd7acfe3245091de6510","modified":1516190198000},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"5a02d7653572eb1cf000c8240c939358ff6cf31f","modified":1516190198000},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"17ec344312cfab25a82598f5fdac77ec7862fba2","modified":1516190198000},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"7a0ad8c9fc6e4ba0a33642ff92f82b71aa0e084d","modified":1516190198000},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1516190198000},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"56fd435cc810c3fdd226468d82664113b70d28bc","modified":1516190198000},{"_id":"themes/archer/layout/_partial/base-qr-box.ejs","hash":"eecbb1b614e9c41441901d72c46d2bfc471573f8","modified":1516190198000},{"_id":"themes/archer/layout/_partial/base-share.ejs","hash":"7e544058b59ffe28584cf8beeefbde07f7edc858","modified":1516190198000},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"6025bfe408585f51b361bac20cdaf07c55274646","modified":1516190198000},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"047f2957f1e17cda022424332587995dffa66e34","modified":1516190198000},{"_id":"themes/archer/source/assets/loading.svg","hash":"9c9ea3adf8aa42fa526208bfd1dd6c1cf5de950c","modified":1516190198000},{"_id":"themes/archer/source/css/style.css","hash":"3b5572a657bde2e107eea456e63ae905314c1cd0","modified":1516190198000},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1516190198000},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1516190198000},{"_id":"themes/archer/source/scripts/main.js","hash":"8fc3697b1ac61befb513da061336fac20c817801","modified":1516190198000},{"_id":"themes/archer/source-src/js/QR-maker.js","hash":"612059a3e2c0039937facde2675d5cc0196a86ef","modified":1516190198000},{"_id":"themes/archer/source-src/js/browser.js","hash":"03017b1e89b59346e681464c7609593c9aafa54c","modified":1516190198000},{"_id":"themes/archer/source-src/js/init.js","hash":"f1c26cb53c0259532b0dc24134c324637820e3e7","modified":1516190198000},{"_id":"themes/archer/source-src/js/main.js","hash":"597d0cb36ef5a8bfba37eb4de26b399b06f36b9f","modified":1516190198000},{"_id":"themes/archer/source-src/js/mobile.js","hash":"ba67f96f996d9c4d43241643e6521f223c27ce16","modified":1516190198000},{"_id":"themes/archer/source-src/js/scroll.js","hash":"a5e3fb7c407e7e3463abc3e1eff8da6e7be97e4c","modified":1516190198000},{"_id":"themes/archer/source-src/js/share.js","hash":"265467a425d52e603796fb9f87c5676b594eefdb","modified":1516190198000},{"_id":"themes/archer/source-src/js/sidebar.js","hash":"077dce8e9e8f1eb17d8fc951d963c8af68c3ce1b","modified":1516190198000},{"_id":"themes/archer/source-src/js/tag.js","hash":"21f6b0bfbd0b5bfaefe1061a17413ce7919c5cdb","modified":1516190198000},{"_id":"themes/archer/source-src/js/util.js","hash":"1c244b8def678df797ab3c049a03998db4f9dabb","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_common.scss","hash":"29659e957386725e83765a50ed2f8e3e53c17cc7","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_mixin.scss","hash":"cd493dbd6e6e8abfe9382b3403606fad266f7040","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_mobile.scss","hash":"da89613c9ba5cc716d931599baa8057d4f4d62c0","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_normalize.scss","hash":"b33d0d7e2e2807f50735f43e742f3c33471d38f7","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_variables.scss","hash":"c8245764a3f7c7a3f58b6004107ef556b3948524","modified":1516190198000},{"_id":"themes/archer/source-src/scss/style.scss","hash":"b9ab8c9b3dffc091e32f7ec42087cf91a5c03bb4","modified":1516190198000},{"_id":"source/image/line.gif","hash":"c21438a7f4307cf8a7cf1e54b48c9e37b9dcb52b","modified":1516190198000},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516190198000},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1516190198000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1516190198000},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1516190198000},{"_id":"themes/archer/source/intro/404.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1516190198000},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"72478610dc2c406e69c2f5f02acca706537244ff","modified":1516190198000},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1516190198000},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1516190198000},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1516190198000},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1516190198000},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"7ac97c51e837aa51e3d3723c1585f618238cfc2a","modified":1516190198000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archive.ejs","hash":"83f42f81125e8df4bdcb53388cc0e56e14ab3729","modified":1516190198000},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"65189b096a4a4ab69a743e853b1daa59dacb4187","modified":1516190198000},{"_id":"themes/archer/source-src/js/lib/qrcode.js","hash":"9caa0d9a9ba4409a3f77540a1b15a7617aeb28e8","modified":1516190198000},{"_id":"themes/archer/source-src/js/lib/qrcode.min.js","hash":"2d06c1f823f34c19981c6ae0b0eb0f5861c5e14b","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_404.scss","hash":"fb65c6158d13793af086e4c8e1c528f3f2b5b828","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_about.scss","hash":"3c8f3aff91d0ef4fee15eba4b57015455e04d34a","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_index-page.scss","hash":"e49d7e18539d87d9d1ee975c82b03b5c63ab2feb","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_post-page.scss","hash":"a4b816c561b771a13ff7190e7715a085768ccf10","modified":1516190198000},{"_id":"source/image/ios.gif","hash":"27909c959aedff4b3425daf6eaf960aca6184c58","modified":1516190198000},{"_id":"themes/archer/source/avatar/avatar_android.png","hash":"f08f5c9a4e7c3983e345e3bc48d949d9abff15f4","modified":1516190198000},{"_id":"themes/archer/source/intro/about-page.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1516190198000},{"_id":"source/image/view.gif","hash":"3f4cdfe9ba6a8eca22606d240e8235e3642fb5d1","modified":1516190198000},{"_id":"themes/archer/source/intro/intro-desktop.jpg","hash":"878b8818b36e8eb00a49458a16e0d0c3c020d0b7","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_partial/_footer.scss","hash":"1d57aeb969824b7a69368e609c2b6525c49de1b5","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_partial/_header.scss","hash":"aed56231be3957304a7b258b6632fdbbb0ca8b38","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_partial/_intro.scss","hash":"35a57372cbc060a2613314dd93d913f8ed2c12c3","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_partial/_paginator.scss","hash":"321670d25b986e24b515db671104b0887dc483c9","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_partial/_profile.scss","hash":"e2d3a7c7e05f870bb38582ef7b01d7fbe8582177","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_partial/_qr.scss","hash":"8746387cb63dd25ebce64bc83285721e1b135cf1","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_post/_code.scss","hash":"3160d023340983dfb502600a994adda1f6f68aff","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_partial/_scrollbar.scss","hash":"3fd2ae67911140336bc9d8fae69486a9e4de4575","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"ce9a22ffca54d6b66b8377d88d6ab99acc89dff8","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"513e9f6483f25c9d9d4a9f34e679f53270afe295","modified":1516190198000},{"_id":"themes/archer/source-src/scss/_partial/_sidebar/_sidebar.scss","hash":"0d6265c99ffbeebaf9785c3dad6073f72763b336","modified":1516190198000},{"_id":"source/image/circle.gif","hash":"b9429f42224a7703a28a41a41591571af6dfe953","modified":1516190198000},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"0b34239a890ef5945f78bf204bba8c29d8828c8e","modified":1516190198000},{"_id":"themes/archer/source/avatar/bg.png","hash":"86f454aa60b3f1b4d3860ec2e789e143f7473204","modified":1516190198000},{"_id":"public/content.json","hash":"1acc9f3ec2ada8031e64baa390c93fb01786be6e","modified":1516190273759},{"_id":"public/about/index.html","hash":"4e189a52e52176276741aa953422c26d7901e832","modified":1516190273819},{"_id":"public/archives/2017/index.html","hash":"c8027c31ba8af1da6431d43567af034b08471196","modified":1516190273823},{"_id":"public/archives/2017/12/index.html","hash":"c8027c31ba8af1da6431d43567af034b08471196","modified":1516190273823},{"_id":"public/archives/2018/index.html","hash":"c98ba6709cb0b5da7f5e66027e2093b859c28747","modified":1516190273823},{"_id":"public/archives/2018/01/index.html","hash":"c98ba6709cb0b5da7f5e66027e2093b859c28747","modified":1516190273823},{"_id":"public/2018/01/11/神奇的canvas之Android&iOS/index.html","hash":"6bf092ec69fe6cd2e55c6b196dccb781577f2a85","modified":1516190273823},{"_id":"public/2018/01/08/神奇的canvas/index.html","hash":"30b05efce5cd72abf791173772b57def22ecc3cf","modified":1516190273823},{"_id":"public/2017/12/31/再见2017/index.html","hash":"d7d28691547071d61dba2ac2214cbd142963352b","modified":1516190273823},{"_id":"public/archives/index.html","hash":"ba4de25de88e31aa2eb45b47296701a8701bbd6d","modified":1516190273823},{"_id":"public/index.html","hash":"902aca95fc97867e44d8bf2540632fc072a38159","modified":1516190273824},{"_id":"public/2018/01/17/hello-world/index.html","hash":"e6ac1691e5e3c210b9520f108bf25ded2b0d8135","modified":1516190273827},{"_id":"public/CNAME","hash":"bb5ff69beff765ec678d157cff058443032ab0e9","modified":1516190273830},{"_id":"public/assets/loading.svg","hash":"9c9ea3adf8aa42fa526208bfd1dd6c1cf5de950c","modified":1516190273830},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1516190273830},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1516190273830},{"_id":"public/image/round.gif","hash":"c0024791c0a3464f90d5d20210332fe370da2265","modified":1516190273836},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1516190273836},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1516190273836},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1516190273837},{"_id":"public/intro/404.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1516190273837},{"_id":"public/404.html","hash":"66480577f8364f48f5da75ec7ebdd7f4812119cd","modified":1516190273840},{"_id":"public/scripts/main.js","hash":"8fc3697b1ac61befb513da061336fac20c817801","modified":1516190273840},{"_id":"public/css/style.css","hash":"3b5572a657bde2e107eea456e63ae905314c1cd0","modified":1516190273841},{"_id":"public/image/segment.gif","hash":"4da47c84794dbc1af747fd7acfe3245091de6510","modified":1516190273841},{"_id":"public/image/line.gif","hash":"c21438a7f4307cf8a7cf1e54b48c9e37b9dcb52b","modified":1516190273843},{"_id":"public/avatar/avatar_android.png","hash":"f08f5c9a4e7c3983e345e3bc48d949d9abff15f4","modified":1516190273844},{"_id":"public/intro/about-page.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1516190273844},{"_id":"public/intro/intro-desktop.jpg","hash":"878b8818b36e8eb00a49458a16e0d0c3c020d0b7","modified":1516190273846},{"_id":"public/image/ios.gif","hash":"27909c959aedff4b3425daf6eaf960aca6184c58","modified":1516190273848},{"_id":"public/image/view.gif","hash":"3f4cdfe9ba6a8eca22606d240e8235e3642fb5d1","modified":1516190273851},{"_id":"public/intro/post-bg.jpg","hash":"0b34239a890ef5945f78bf204bba8c29d8828c8e","modified":1516190273859},{"_id":"public/image/circle.gif","hash":"b9429f42224a7703a28a41a41591571af6dfe953","modified":1516190273860},{"_id":"public/avatar/bg.png","hash":"86f454aa60b3f1b4d3860ec2e789e143f7473204","modified":1516190273862}],"Category":[],"Data":[],"Page":[{"title":"charles","layout":"about","_content":"怎样，你想认识我嘛嘎嘎嘎\n","source":"about/index.md","raw":"---\ntitle: charles\nlayout: about\n---\n怎样，你想认识我嘛嘎嘎嘎\n","date":"2018-01-17T11:56:38.000Z","updated":"2018-01-17T11:56:38.000Z","path":"about/index.html","comments":1,"_id":"cjcj0jieq0001m5sakczs8jje","content":"<p>怎样，你想认识我嘛嘎嘎嘎</p>\n","site":{"data":{}},"excerpt":"","more":"<p>怎样，你想认识我嘛嘎嘎嘎</p>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-01-17T11:56:38.000Z","updated":"2018-01-17T11:56:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcj0jiel0000m5sakakgd9c5","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"再见2017，你好2018","date":"2017-12-31T02:37:56.000Z","_content":"\n一直心心念念想要建立一个自己的个人网站，今天终于搞好了，开心^_^\n\n# 开始絮叨\n\n今天是2017年最后一天，毕业一年半了，过年就25了，却感觉一点也不像个大人，\b心智外表什么的还像个孩纸，\b成长的有点慢了。不过看看周围一圈人大家都一样啊，可能这也是常态吧。\n\n# 成绩\n\n\b创业到现在\b一年半了，这一年半在技术上还算小有成就：上线了5个 app，其中两个 android 两个 iOS，一个 android 平板，玩得了 AR，\b折腾过 RN，又开始学 Vue，感觉自己也像个全栈了。不过缺陷也很大：技术上\b钻研的深度不够，还停留在应用的层面，稍微复杂一些的东西就要靠 google 了。这个在以后的学习中必须要注意到。\n\n\b技术之外的成绩就乏善可陈\b。公司在这一年做过两个自己的产品，也投入了不少时间、精力、\b资金，\b第一个产品上线一年，第二个产品\b上线半年，但是\b还没有任何收益，\b创业之初的目标几乎一个都没实现；接过两个项目，钱还没有完全收回来，整个公司日子过的紧巴巴。\n\n# \b现状\n\n现状并不怎么好，创业一年半了公司前景也不是很明朗\b\b。每月收入\b\b除\b吃穿住行外所剩无几，\b银行卡里也没攒到\b积蓄，\b想了很久的\b Mackbook Pro 还在想着。上次回家也没给父母带些什么，临走母亲硬塞给我几百块钱，当时就心酸得哭了出来。\n\n至今仍旧单身，\b家族里\b我这一辈就剩我一个单身狗了，就连小我几岁的外甥外甥女都有了各自的男女朋友，这下春节回家要被亲戚集体嘲笑了啊（捂脸）。看着身边的朋友们纷纷\b脱单、结婚，\b嘴上笑嘻嘻，心里羡慕很。朋友去年介绍的女生，还在经常联系着，她人很好，我也有些心动，但是却始终不敢迈出一步：人家远在西安，我不再敢开始一段异地恋怕重蹈前两次的覆辙；又没法放弃这边的事业跑回去找她。\b既希望能这样维持现状到我有能力撑起自信去追她，又害怕那一天遥遥无期耽误了人家，很是纠结。\n\n\b小日子还算过得不错，一直和一起打拼的同事也是大学同学（虽然出差半年了还没回来）还有初中就认识的好兄弟小马住在一起，其乐融融，和创业头头也是\b大学室友住了三年多半年前才分开，公司就在大学门口，和大学时候最要好的那群朋友时常聚餐玩乐，仿佛还没有离开学校。\n\n# 不足\n\n工作中很明显的感觉到，我在技术上的钻研深度还不够，\b目前掌握的一些技术都只停留在应用层面，\b这样就只能称为程序猿离攻城狮还相差很远。\n\n英语\b，我觉得作为一个程序猿，英语能力不足也是很致命的。\n\n与人交往能力，在北京出差的时候，感觉很明显，有些事情聪聪一个电话就能搞定，我却在那等很久也解决不了，这方面要向人家好好学习。\n\n# 提升计划\n\n为了在明年写\b总结的时候再没有现状中的哪些遗憾，\b同时消灭不足，在此列几个计划吧，做到了甜头就是奖励，做不到后果自负\n\n* 既然开了博客，就不能当作摆设，每个月至少写上两篇技术博客，把自己所学的知识记录下来\n* \b少玩游戏看视频\b刷微博知乎，多看看技术文章\n* \b提升英语阅读能力，养成读英文书的习惯，为更好地\b学习英文技术文档打下基础\n* 早睡早起，健身，练出腱子肉\n\n# 2018\n\n2018你好！希望今年对我好点。","source":"_posts/再见2017.md","raw":"---\ntitle: 再见2017，你好2018\ndate: 2017-12-31 10:37:56\ntags:\n---\n\n一直心心念念想要建立一个自己的个人网站，今天终于搞好了，开心^_^\n\n# 开始絮叨\n\n今天是2017年最后一天，毕业一年半了，过年就25了，却感觉一点也不像个大人，\b心智外表什么的还像个孩纸，\b成长的有点慢了。不过看看周围一圈人大家都一样啊，可能这也是常态吧。\n\n# 成绩\n\n\b创业到现在\b一年半了，这一年半在技术上还算小有成就：上线了5个 app，其中两个 android 两个 iOS，一个 android 平板，玩得了 AR，\b折腾过 RN，又开始学 Vue，感觉自己也像个全栈了。不过缺陷也很大：技术上\b钻研的深度不够，还停留在应用的层面，稍微复杂一些的东西就要靠 google 了。这个在以后的学习中必须要注意到。\n\n\b技术之外的成绩就乏善可陈\b。公司在这一年做过两个自己的产品，也投入了不少时间、精力、\b资金，\b第一个产品上线一年，第二个产品\b上线半年，但是\b还没有任何收益，\b创业之初的目标几乎一个都没实现；接过两个项目，钱还没有完全收回来，整个公司日子过的紧巴巴。\n\n# \b现状\n\n现状并不怎么好，创业一年半了公司前景也不是很明朗\b\b。每月收入\b\b除\b吃穿住行外所剩无几，\b银行卡里也没攒到\b积蓄，\b想了很久的\b Mackbook Pro 还在想着。上次回家也没给父母带些什么，临走母亲硬塞给我几百块钱，当时就心酸得哭了出来。\n\n至今仍旧单身，\b家族里\b我这一辈就剩我一个单身狗了，就连小我几岁的外甥外甥女都有了各自的男女朋友，这下春节回家要被亲戚集体嘲笑了啊（捂脸）。看着身边的朋友们纷纷\b脱单、结婚，\b嘴上笑嘻嘻，心里羡慕很。朋友去年介绍的女生，还在经常联系着，她人很好，我也有些心动，但是却始终不敢迈出一步：人家远在西安，我不再敢开始一段异地恋怕重蹈前两次的覆辙；又没法放弃这边的事业跑回去找她。\b既希望能这样维持现状到我有能力撑起自信去追她，又害怕那一天遥遥无期耽误了人家，很是纠结。\n\n\b小日子还算过得不错，一直和一起打拼的同事也是大学同学（虽然出差半年了还没回来）还有初中就认识的好兄弟小马住在一起，其乐融融，和创业头头也是\b大学室友住了三年多半年前才分开，公司就在大学门口，和大学时候最要好的那群朋友时常聚餐玩乐，仿佛还没有离开学校。\n\n# 不足\n\n工作中很明显的感觉到，我在技术上的钻研深度还不够，\b目前掌握的一些技术都只停留在应用层面，\b这样就只能称为程序猿离攻城狮还相差很远。\n\n英语\b，我觉得作为一个程序猿，英语能力不足也是很致命的。\n\n与人交往能力，在北京出差的时候，感觉很明显，有些事情聪聪一个电话就能搞定，我却在那等很久也解决不了，这方面要向人家好好学习。\n\n# 提升计划\n\n为了在明年写\b总结的时候再没有现状中的哪些遗憾，\b同时消灭不足，在此列几个计划吧，做到了甜头就是奖励，做不到后果自负\n\n* 既然开了博客，就不能当作摆设，每个月至少写上两篇技术博客，把自己所学的知识记录下来\n* \b少玩游戏看视频\b刷微博知乎，多看看技术文章\n* \b提升英语阅读能力，养成读英文书的习惯，为更好地\b学习英文技术文档打下基础\n* 早睡早起，健身，练出腱子肉\n\n# 2018\n\n2018你好！希望今年对我好点。","slug":"再见2017","published":1,"updated":"2018-01-17T11:56:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcj0jier0002m5sa05g6t4xd","content":"<p>一直心心念念想要建立一个自己的个人网站，今天终于搞好了，开心^_^</p>\n<h1 id=\"开始絮叨\"><a href=\"#开始絮叨\" class=\"headerlink\" title=\"开始絮叨\"></a>开始絮叨</h1><p>今天是2017年最后一天，毕业一年半了，过年就25了，却感觉一点也不像个大人，\b心智外表什么的还像个孩纸，\b成长的有点慢了。不过看看周围一圈人大家都一样啊，可能这也是常态吧。</p>\n<h1 id=\"成绩\"><a href=\"#成绩\" class=\"headerlink\" title=\"成绩\"></a>成绩</h1><p>\b创业到现在\b一年半了，这一年半在技术上还算小有成就：上线了5个 app，其中两个 android 两个 iOS，一个 android 平板，玩得了 AR，\b折腾过 RN，又开始学 Vue，感觉自己也像个全栈了。不过缺陷也很大：技术上\b钻研的深度不够，还停留在应用的层面，稍微复杂一些的东西就要靠 google 了。这个在以后的学习中必须要注意到。</p>\n<p>\b技术之外的成绩就乏善可陈\b。公司在这一年做过两个自己的产品，也投入了不少时间、精力、\b资金，\b第一个产品上线一年，第二个产品\b上线半年，但是\b还没有任何收益，\b创业之初的目标几乎一个都没实现；接过两个项目，钱还没有完全收回来，整个公司日子过的紧巴巴。</p>\n<h1 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"\b现状\"></a>\b现状</h1><p>现状并不怎么好，创业一年半了公司前景也不是很明朗\b\b。每月收入\b\b除\b吃穿住行外所剩无几，\b银行卡里也没攒到\b积蓄，\b想了很久的\b Mackbook Pro 还在想着。上次回家也没给父母带些什么，临走母亲硬塞给我几百块钱，当时就心酸得哭了出来。</p>\n<p>至今仍旧单身，\b家族里\b我这一辈就剩我一个单身狗了，就连小我几岁的外甥外甥女都有了各自的男女朋友，这下春节回家要被亲戚集体嘲笑了啊（捂脸）。看着身边的朋友们纷纷\b脱单、结婚，\b嘴上笑嘻嘻，心里羡慕很。朋友去年介绍的女生，还在经常联系着，她人很好，我也有些心动，但是却始终不敢迈出一步：人家远在西安，我不再敢开始一段异地恋怕重蹈前两次的覆辙；又没法放弃这边的事业跑回去找她。\b既希望能这样维持现状到我有能力撑起自信去追她，又害怕那一天遥遥无期耽误了人家，很是纠结。</p>\n<p>\b小日子还算过得不错，一直和一起打拼的同事也是大学同学（虽然出差半年了还没回来）还有初中就认识的好兄弟小马住在一起，其乐融融，和创业头头也是\b大学室友住了三年多半年前才分开，公司就在大学门口，和大学时候最要好的那群朋友时常聚餐玩乐，仿佛还没有离开学校。</p>\n<h1 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h1><p>工作中很明显的感觉到，我在技术上的钻研深度还不够，\b目前掌握的一些技术都只停留在应用层面，\b这样就只能称为程序猿离攻城狮还相差很远。</p>\n<p>英语\b，我觉得作为一个程序猿，英语能力不足也是很致命的。</p>\n<p>与人交往能力，在北京出差的时候，感觉很明显，有些事情聪聪一个电话就能搞定，我却在那等很久也解决不了，这方面要向人家好好学习。</p>\n<h1 id=\"提升计划\"><a href=\"#提升计划\" class=\"headerlink\" title=\"提升计划\"></a>提升计划</h1><p>为了在明年写\b总结的时候再没有现状中的哪些遗憾，\b同时消灭不足，在此列几个计划吧，做到了甜头就是奖励，做不到后果自负</p>\n<ul>\n<li>既然开了博客，就不能当作摆设，每个月至少写上两篇技术博客，把自己所学的知识记录下来</li>\n<li>\b少玩游戏看视频\b刷微博知乎，多看看技术文章</li>\n<li>\b提升英语阅读能力，养成读英文书的习惯，为更好地\b学习英文技术文档打下基础</li>\n<li>早睡早起，健身，练出腱子肉</li>\n</ul>\n<h1 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h1><p>2018你好！希望今年对我好点。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一直心心念念想要建立一个自己的个人网站，今天终于搞好了，开心^_^</p>\n<h1 id=\"开始絮叨\"><a href=\"#开始絮叨\" class=\"headerlink\" title=\"开始絮叨\"></a>开始絮叨</h1><p>今天是2017年最后一天，毕业一年半了，过年就25了，却感觉一点也不像个大人，\b心智外表什么的还像个孩纸，\b成长的有点慢了。不过看看周围一圈人大家都一样啊，可能这也是常态吧。</p>\n<h1 id=\"成绩\"><a href=\"#成绩\" class=\"headerlink\" title=\"成绩\"></a>成绩</h1><p>\b创业到现在\b一年半了，这一年半在技术上还算小有成就：上线了5个 app，其中两个 android 两个 iOS，一个 android 平板，玩得了 AR，\b折腾过 RN，又开始学 Vue，感觉自己也像个全栈了。不过缺陷也很大：技术上\b钻研的深度不够，还停留在应用的层面，稍微复杂一些的东西就要靠 google 了。这个在以后的学习中必须要注意到。</p>\n<p>\b技术之外的成绩就乏善可陈\b。公司在这一年做过两个自己的产品，也投入了不少时间、精力、\b资金，\b第一个产品上线一年，第二个产品\b上线半年，但是\b还没有任何收益，\b创业之初的目标几乎一个都没实现；接过两个项目，钱还没有完全收回来，整个公司日子过的紧巴巴。</p>\n<h1 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"\b现状\"></a>\b现状</h1><p>现状并不怎么好，创业一年半了公司前景也不是很明朗\b\b。每月收入\b\b除\b吃穿住行外所剩无几，\b银行卡里也没攒到\b积蓄，\b想了很久的\b Mackbook Pro 还在想着。上次回家也没给父母带些什么，临走母亲硬塞给我几百块钱，当时就心酸得哭了出来。</p>\n<p>至今仍旧单身，\b家族里\b我这一辈就剩我一个单身狗了，就连小我几岁的外甥外甥女都有了各自的男女朋友，这下春节回家要被亲戚集体嘲笑了啊（捂脸）。看着身边的朋友们纷纷\b脱单、结婚，\b嘴上笑嘻嘻，心里羡慕很。朋友去年介绍的女生，还在经常联系着，她人很好，我也有些心动，但是却始终不敢迈出一步：人家远在西安，我不再敢开始一段异地恋怕重蹈前两次的覆辙；又没法放弃这边的事业跑回去找她。\b既希望能这样维持现状到我有能力撑起自信去追她，又害怕那一天遥遥无期耽误了人家，很是纠结。</p>\n<p>\b小日子还算过得不错，一直和一起打拼的同事也是大学同学（虽然出差半年了还没回来）还有初中就认识的好兄弟小马住在一起，其乐融融，和创业头头也是\b大学室友住了三年多半年前才分开，公司就在大学门口，和大学时候最要好的那群朋友时常聚餐玩乐，仿佛还没有离开学校。</p>\n<h1 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h1><p>工作中很明显的感觉到，我在技术上的钻研深度还不够，\b目前掌握的一些技术都只停留在应用层面，\b这样就只能称为程序猿离攻城狮还相差很远。</p>\n<p>英语\b，我觉得作为一个程序猿，英语能力不足也是很致命的。</p>\n<p>与人交往能力，在北京出差的时候，感觉很明显，有些事情聪聪一个电话就能搞定，我却在那等很久也解决不了，这方面要向人家好好学习。</p>\n<h1 id=\"提升计划\"><a href=\"#提升计划\" class=\"headerlink\" title=\"提升计划\"></a>提升计划</h1><p>为了在明年写\b总结的时候再没有现状中的哪些遗憾，\b同时消灭不足，在此列几个计划吧，做到了甜头就是奖励，做不到后果自负</p>\n<ul>\n<li>既然开了博客，就不能当作摆设，每个月至少写上两篇技术博客，把自己所学的知识记录下来</li>\n<li>\b少玩游戏看视频\b刷微博知乎，多看看技术文章</li>\n<li>\b提升英语阅读能力，养成读英文书的习惯，为更好地\b学习英文技术文档打下基础</li>\n<li>早睡早起，健身，练出腱子肉</li>\n</ul>\n<h1 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h1><p>2018你好！希望今年对我好点。</p>\n"},{"title":"神奇的 Canvas","date":"2018-01-08T10:00:00.000Z","_content":"最近在浏览掘金网站的时候看到掘金小册中有一个很有（便）意（宜）思的册子:[如何使用 Canvas 制作出炫酷的网页背景特效](https://juejin.im/book/5a0ab8e2f265da43111fbab2/section)，便想到给我的博客添加一个炫酷的背景。顺便学习一下 canvas 这个元素的使用。\n\n# 效果\n\n最终效果就在[博客](http://jiayueji.cn)上就能看到啦。下面来说一下实现方式。\n\n# 实现\n\n建议对 canvas 还不了解的同学去掘金小册上学习学习，我这里不再讲解。\n\n我的博客是用 Hexo 搭建的，使用了 [Archer](http://firework.studio/archer-demo/) 主题，博客的最上层样式作者定义在 layout.ejs 文件里。\n\n```\n<!DOCTYPE html>\n<html>\n   ...\n    <div class=\"wrapper\">\n        ...\n    </div>\n    ...\n</html>\n```\n\n既然是在 canvas 里面画炫酷的背景，那就需要在这里添加一个 canvas 元素，并且和 div:class=\"wrapper\" 一样大。\n\n改造 layout.ejs 文件，用一个 div 将 div:class=\"wrapper\" 和我们的 canvas 包裹起来：\n\n```\n<!DOCTYPE html>\n<html>\n    ...\n    <div id=\"container-wrapper-canvas\" style=\"position:relative;\">\n        <div class=\"wrapper\">\n        ...\n        </div>\n        <canvas id=\"myCanvas\" style=\"position:absolute;left:0;top:0;z-index:0;pointer-events:none;\" />\n        <script>\n        </script>\n        ...\n    </div>\n    ...\n</html>\n```\n\n因为不想让 canvas 响应点击事件，所以在它的 style 里面加上：\n\n```\npointer-events:none;\n```\n\n先定义一些变量（以下代码一股脑塞到 script 标签里就行啦）。\n\n```\n// 屏幕宽高\nlet container = document.getElementById('container-wrapper-canvas')\nlet WIDTH = container.offsetWidth\nlet HEIGHT = container.offsetHeight\n// canvas\nlet canvas = document.getElementById('myCanvas')\nlet context = canvas.getContext('2d')\n// 圆点数量\nlet roundCount = HEIGHT / 10\n// 存放远点属性的数组\nlet round = []\n\n// 令 canvas 铺满屏幕\ncanvas.width = WIDTH\ncanvas.height = HEIGHT\n```\n\n构造圆点位置颜色大小等属性\n\n```\n// 构造圆点位置颜色大小等属性\nfunction roundItem(index, x, y) {\n    this.index = index\n    this.x = x\n    this.y = y\n    this.r = Math.random() * 4 + 1\n    let alpha = (Math.floor(Math.random() * 5) + 1) / 10 / 2\n    this.color = \"rgba(0,0,0,\" + alpha + \")\"\n}\n```\n\n画圆点\n\n```\n// 画圆点\nroundItem.prototype.draw = function() {\n    context.fillStyle = this.color\n    context.shadowBlur = this.r * 2\n    context.beginPath()\n    context.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false)\n    context.closePath()\n    context.fill()\n}\n```\n\n这里看着很熟悉，在做 android、iOS 开发自定义 View 的时候就遇到过类似的代码，在 draw() 函数里画图，这里我想到可以在移动端使用类似的方法画出类似的背景。\n\n这个时候调用初始化函数就可以看到静态的一个个小圆点了\n\n```\n// 调用初始化函数\ninit();\nfunction init() {\n    for(var i = 0; i < roundCount; i++ ){\n        round[i] = new roundItem(i,Math.random() * WIDTH,Math.random() * HEIGHT);\n        round[i].draw();\n    }\n    animate()\n}\n```\n\n为了让小圆点动起来，我们写下面的函数。\n\n```\n// 移动圆点\nroundItem.prototype.move = function () {\n    // y方向移动速度与圆点半径成正比\n    this.y -= this.r / 20\n\n    // x方向移动分两个方向，移动速度与圆点半径成正比\n    if (this.index % 2 == 0) {\n        this.x -= 0.08\n    } else {\n        this.x += this.r / 40\n    }\n\n    // 如果超出范围就把它拉回来\n    if (this.y <= 0) {\n        this.y += HEIGHT\n    }\n    if (this.x <= 0) {\n        this.x += WIDTH\n    }\n    if (this.x >= WIDTH) {\n        this.x -= WIDTH\n    }\n\n    this.draw()\n}\n```\n\n```\n// 定义动画\nfunction animate() {\n    context.clearRect(0, 0, WIDTH, HEIGHT);\n    for (var i in round) {\n        round[i].move()\n    }\n    requestAnimationFrame(animate)\n}\n```\n\n这个时候就可以看到动态的一个个小圆点了。\n\n是不是很炫酷呢，有空我再将它改造得更炫酷一点。\n","source":"_posts/神奇的canvas.md","raw":"---\ntitle: 神奇的 Canvas\ndate: 2018-1-8 18:00:00\ntags:\n---\n最近在浏览掘金网站的时候看到掘金小册中有一个很有（便）意（宜）思的册子:[如何使用 Canvas 制作出炫酷的网页背景特效](https://juejin.im/book/5a0ab8e2f265da43111fbab2/section)，便想到给我的博客添加一个炫酷的背景。顺便学习一下 canvas 这个元素的使用。\n\n# 效果\n\n最终效果就在[博客](http://jiayueji.cn)上就能看到啦。下面来说一下实现方式。\n\n# 实现\n\n建议对 canvas 还不了解的同学去掘金小册上学习学习，我这里不再讲解。\n\n我的博客是用 Hexo 搭建的，使用了 [Archer](http://firework.studio/archer-demo/) 主题，博客的最上层样式作者定义在 layout.ejs 文件里。\n\n```\n<!DOCTYPE html>\n<html>\n   ...\n    <div class=\"wrapper\">\n        ...\n    </div>\n    ...\n</html>\n```\n\n既然是在 canvas 里面画炫酷的背景，那就需要在这里添加一个 canvas 元素，并且和 div:class=\"wrapper\" 一样大。\n\n改造 layout.ejs 文件，用一个 div 将 div:class=\"wrapper\" 和我们的 canvas 包裹起来：\n\n```\n<!DOCTYPE html>\n<html>\n    ...\n    <div id=\"container-wrapper-canvas\" style=\"position:relative;\">\n        <div class=\"wrapper\">\n        ...\n        </div>\n        <canvas id=\"myCanvas\" style=\"position:absolute;left:0;top:0;z-index:0;pointer-events:none;\" />\n        <script>\n        </script>\n        ...\n    </div>\n    ...\n</html>\n```\n\n因为不想让 canvas 响应点击事件，所以在它的 style 里面加上：\n\n```\npointer-events:none;\n```\n\n先定义一些变量（以下代码一股脑塞到 script 标签里就行啦）。\n\n```\n// 屏幕宽高\nlet container = document.getElementById('container-wrapper-canvas')\nlet WIDTH = container.offsetWidth\nlet HEIGHT = container.offsetHeight\n// canvas\nlet canvas = document.getElementById('myCanvas')\nlet context = canvas.getContext('2d')\n// 圆点数量\nlet roundCount = HEIGHT / 10\n// 存放远点属性的数组\nlet round = []\n\n// 令 canvas 铺满屏幕\ncanvas.width = WIDTH\ncanvas.height = HEIGHT\n```\n\n构造圆点位置颜色大小等属性\n\n```\n// 构造圆点位置颜色大小等属性\nfunction roundItem(index, x, y) {\n    this.index = index\n    this.x = x\n    this.y = y\n    this.r = Math.random() * 4 + 1\n    let alpha = (Math.floor(Math.random() * 5) + 1) / 10 / 2\n    this.color = \"rgba(0,0,0,\" + alpha + \")\"\n}\n```\n\n画圆点\n\n```\n// 画圆点\nroundItem.prototype.draw = function() {\n    context.fillStyle = this.color\n    context.shadowBlur = this.r * 2\n    context.beginPath()\n    context.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false)\n    context.closePath()\n    context.fill()\n}\n```\n\n这里看着很熟悉，在做 android、iOS 开发自定义 View 的时候就遇到过类似的代码，在 draw() 函数里画图，这里我想到可以在移动端使用类似的方法画出类似的背景。\n\n这个时候调用初始化函数就可以看到静态的一个个小圆点了\n\n```\n// 调用初始化函数\ninit();\nfunction init() {\n    for(var i = 0; i < roundCount; i++ ){\n        round[i] = new roundItem(i,Math.random() * WIDTH,Math.random() * HEIGHT);\n        round[i].draw();\n    }\n    animate()\n}\n```\n\n为了让小圆点动起来，我们写下面的函数。\n\n```\n// 移动圆点\nroundItem.prototype.move = function () {\n    // y方向移动速度与圆点半径成正比\n    this.y -= this.r / 20\n\n    // x方向移动分两个方向，移动速度与圆点半径成正比\n    if (this.index % 2 == 0) {\n        this.x -= 0.08\n    } else {\n        this.x += this.r / 40\n    }\n\n    // 如果超出范围就把它拉回来\n    if (this.y <= 0) {\n        this.y += HEIGHT\n    }\n    if (this.x <= 0) {\n        this.x += WIDTH\n    }\n    if (this.x >= WIDTH) {\n        this.x -= WIDTH\n    }\n\n    this.draw()\n}\n```\n\n```\n// 定义动画\nfunction animate() {\n    context.clearRect(0, 0, WIDTH, HEIGHT);\n    for (var i in round) {\n        round[i].move()\n    }\n    requestAnimationFrame(animate)\n}\n```\n\n这个时候就可以看到动态的一个个小圆点了。\n\n是不是很炫酷呢，有空我再将它改造得更炫酷一点。\n","slug":"神奇的canvas","published":1,"updated":"2018-01-17T11:56:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcj0jiet0003m5sa5e41cs46","content":"<p>最近在浏览掘金网站的时候看到掘金小册中有一个很有（便）意（宜）思的册子:<a href=\"https://juejin.im/book/5a0ab8e2f265da43111fbab2/section\" target=\"_blank\" rel=\"noopener\">如何使用 Canvas 制作出炫酷的网页背景特效</a>，便想到给我的博客添加一个炫酷的背景。顺便学习一下 canvas 这个元素的使用。</p>\n<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p>最终效果就在<a href=\"http://jiayueji.cn\" target=\"_blank\" rel=\"noopener\">博客</a>上就能看到啦。下面来说一下实现方式。</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>建议对 canvas 还不了解的同学去掘金小册上学习学习，我这里不再讲解。</p>\n<p>我的博客是用 Hexo 搭建的，使用了 <a href=\"http://firework.studio/archer-demo/\" target=\"_blank\" rel=\"noopener\">Archer</a> 主题，博客的最上层样式作者定义在 layout.ejs 文件里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">    &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>既然是在 canvas 里面画炫酷的背景，那就需要在这里添加一个 canvas 元素，并且和 div:class=”wrapper” 一样大。</p>\n<p>改造 layout.ejs 文件，用一个 div 将 div:class=”wrapper” 和我们的 canvas 包裹起来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;div id=&quot;container-wrapper-canvas&quot; style=&quot;position:relative;&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;canvas id=&quot;myCanvas&quot; style=&quot;position:absolute;left:0;top:0;z-index:0;pointer-events:none;&quot; /&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>因为不想让 canvas 响应点击事件，所以在它的 style 里面加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pointer-events:none;</span><br></pre></td></tr></table></figure>\n<p>先定义一些变量（以下代码一股脑塞到 script 标签里就行啦）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 屏幕宽高</span><br><span class=\"line\">let container = document.getElementById(&apos;container-wrapper-canvas&apos;)</span><br><span class=\"line\">let WIDTH = container.offsetWidth</span><br><span class=\"line\">let HEIGHT = container.offsetHeight</span><br><span class=\"line\">// canvas</span><br><span class=\"line\">let canvas = document.getElementById(&apos;myCanvas&apos;)</span><br><span class=\"line\">let context = canvas.getContext(&apos;2d&apos;)</span><br><span class=\"line\">// 圆点数量</span><br><span class=\"line\">let roundCount = HEIGHT / 10</span><br><span class=\"line\">// 存放远点属性的数组</span><br><span class=\"line\">let round = []</span><br><span class=\"line\"></span><br><span class=\"line\">// 令 canvas 铺满屏幕</span><br><span class=\"line\">canvas.width = WIDTH</span><br><span class=\"line\">canvas.height = HEIGHT</span><br></pre></td></tr></table></figure>\n<p>构造圆点位置颜色大小等属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造圆点位置颜色大小等属性</span><br><span class=\"line\">function roundItem(index, x, y) &#123;</span><br><span class=\"line\">    this.index = index</span><br><span class=\"line\">    this.x = x</span><br><span class=\"line\">    this.y = y</span><br><span class=\"line\">    this.r = Math.random() * 4 + 1</span><br><span class=\"line\">    let alpha = (Math.floor(Math.random() * 5) + 1) / 10 / 2</span><br><span class=\"line\">    this.color = &quot;rgba(0,0,0,&quot; + alpha + &quot;)&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>画圆点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 画圆点</span><br><span class=\"line\">roundItem.prototype.draw = function() &#123;</span><br><span class=\"line\">    context.fillStyle = this.color</span><br><span class=\"line\">    context.shadowBlur = this.r * 2</span><br><span class=\"line\">    context.beginPath()</span><br><span class=\"line\">    context.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false)</span><br><span class=\"line\">    context.closePath()</span><br><span class=\"line\">    context.fill()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里看着很熟悉，在做 android、iOS 开发自定义 View 的时候就遇到过类似的代码，在 draw() 函数里画图，这里我想到可以在移动端使用类似的方法画出类似的背景。</p>\n<p>这个时候调用初始化函数就可以看到静态的一个个小圆点了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 调用初始化函数</span><br><span class=\"line\">init();</span><br><span class=\"line\">function init() &#123;</span><br><span class=\"line\">    for(var i = 0; i &lt; roundCount; i++ )&#123;</span><br><span class=\"line\">        round[i] = new roundItem(i,Math.random() * WIDTH,Math.random() * HEIGHT);</span><br><span class=\"line\">        round[i].draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    animate()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了让小圆点动起来，我们写下面的函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 移动圆点</span><br><span class=\"line\">roundItem.prototype.move = function () &#123;</span><br><span class=\"line\">    // y方向移动速度与圆点半径成正比</span><br><span class=\"line\">    this.y -= this.r / 20</span><br><span class=\"line\"></span><br><span class=\"line\">    // x方向移动分两个方向，移动速度与圆点半径成正比</span><br><span class=\"line\">    if (this.index % 2 == 0) &#123;</span><br><span class=\"line\">        this.x -= 0.08</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        this.x += this.r / 40</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果超出范围就把它拉回来</span><br><span class=\"line\">    if (this.y &lt;= 0) &#123;</span><br><span class=\"line\">        this.y += HEIGHT</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (this.x &lt;= 0) &#123;</span><br><span class=\"line\">        this.x += WIDTH</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (this.x &gt;= WIDTH) &#123;</span><br><span class=\"line\">        this.x -= WIDTH</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    this.draw()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义动画</span><br><span class=\"line\">function animate() &#123;</span><br><span class=\"line\">    context.clearRect(0, 0, WIDTH, HEIGHT);</span><br><span class=\"line\">    for (var i in round) &#123;</span><br><span class=\"line\">        round[i].move()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    requestAnimationFrame(animate)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候就可以看到动态的一个个小圆点了。</p>\n<p>是不是很炫酷呢，有空我再将它改造得更炫酷一点。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在浏览掘金网站的时候看到掘金小册中有一个很有（便）意（宜）思的册子:<a href=\"https://juejin.im/book/5a0ab8e2f265da43111fbab2/section\" target=\"_blank\" rel=\"noopener\">如何使用 Canvas 制作出炫酷的网页背景特效</a>，便想到给我的博客添加一个炫酷的背景。顺便学习一下 canvas 这个元素的使用。</p>\n<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><p>最终效果就在<a href=\"http://jiayueji.cn\" target=\"_blank\" rel=\"noopener\">博客</a>上就能看到啦。下面来说一下实现方式。</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>建议对 canvas 还不了解的同学去掘金小册上学习学习，我这里不再讲解。</p>\n<p>我的博客是用 Hexo 搭建的，使用了 <a href=\"http://firework.studio/archer-demo/\" target=\"_blank\" rel=\"noopener\">Archer</a> 主题，博客的最上层样式作者定义在 layout.ejs 文件里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">    &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>既然是在 canvas 里面画炫酷的背景，那就需要在这里添加一个 canvas 元素，并且和 div:class=”wrapper” 一样大。</p>\n<p>改造 layout.ejs 文件，用一个 div 将 div:class=”wrapper” 和我们的 canvas 包裹起来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;div id=&quot;container-wrapper-canvas&quot; style=&quot;position:relative;&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;canvas id=&quot;myCanvas&quot; style=&quot;position:absolute;left:0;top:0;z-index:0;pointer-events:none;&quot; /&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>因为不想让 canvas 响应点击事件，所以在它的 style 里面加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pointer-events:none;</span><br></pre></td></tr></table></figure>\n<p>先定义一些变量（以下代码一股脑塞到 script 标签里就行啦）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 屏幕宽高</span><br><span class=\"line\">let container = document.getElementById(&apos;container-wrapper-canvas&apos;)</span><br><span class=\"line\">let WIDTH = container.offsetWidth</span><br><span class=\"line\">let HEIGHT = container.offsetHeight</span><br><span class=\"line\">// canvas</span><br><span class=\"line\">let canvas = document.getElementById(&apos;myCanvas&apos;)</span><br><span class=\"line\">let context = canvas.getContext(&apos;2d&apos;)</span><br><span class=\"line\">// 圆点数量</span><br><span class=\"line\">let roundCount = HEIGHT / 10</span><br><span class=\"line\">// 存放远点属性的数组</span><br><span class=\"line\">let round = []</span><br><span class=\"line\"></span><br><span class=\"line\">// 令 canvas 铺满屏幕</span><br><span class=\"line\">canvas.width = WIDTH</span><br><span class=\"line\">canvas.height = HEIGHT</span><br></pre></td></tr></table></figure>\n<p>构造圆点位置颜色大小等属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造圆点位置颜色大小等属性</span><br><span class=\"line\">function roundItem(index, x, y) &#123;</span><br><span class=\"line\">    this.index = index</span><br><span class=\"line\">    this.x = x</span><br><span class=\"line\">    this.y = y</span><br><span class=\"line\">    this.r = Math.random() * 4 + 1</span><br><span class=\"line\">    let alpha = (Math.floor(Math.random() * 5) + 1) / 10 / 2</span><br><span class=\"line\">    this.color = &quot;rgba(0,0,0,&quot; + alpha + &quot;)&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>画圆点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 画圆点</span><br><span class=\"line\">roundItem.prototype.draw = function() &#123;</span><br><span class=\"line\">    context.fillStyle = this.color</span><br><span class=\"line\">    context.shadowBlur = this.r * 2</span><br><span class=\"line\">    context.beginPath()</span><br><span class=\"line\">    context.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false)</span><br><span class=\"line\">    context.closePath()</span><br><span class=\"line\">    context.fill()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里看着很熟悉，在做 android、iOS 开发自定义 View 的时候就遇到过类似的代码，在 draw() 函数里画图，这里我想到可以在移动端使用类似的方法画出类似的背景。</p>\n<p>这个时候调用初始化函数就可以看到静态的一个个小圆点了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 调用初始化函数</span><br><span class=\"line\">init();</span><br><span class=\"line\">function init() &#123;</span><br><span class=\"line\">    for(var i = 0; i &lt; roundCount; i++ )&#123;</span><br><span class=\"line\">        round[i] = new roundItem(i,Math.random() * WIDTH,Math.random() * HEIGHT);</span><br><span class=\"line\">        round[i].draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    animate()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了让小圆点动起来，我们写下面的函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 移动圆点</span><br><span class=\"line\">roundItem.prototype.move = function () &#123;</span><br><span class=\"line\">    // y方向移动速度与圆点半径成正比</span><br><span class=\"line\">    this.y -= this.r / 20</span><br><span class=\"line\"></span><br><span class=\"line\">    // x方向移动分两个方向，移动速度与圆点半径成正比</span><br><span class=\"line\">    if (this.index % 2 == 0) &#123;</span><br><span class=\"line\">        this.x -= 0.08</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        this.x += this.r / 40</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果超出范围就把它拉回来</span><br><span class=\"line\">    if (this.y &lt;= 0) &#123;</span><br><span class=\"line\">        this.y += HEIGHT</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (this.x &lt;= 0) &#123;</span><br><span class=\"line\">        this.x += WIDTH</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (this.x &gt;= WIDTH) &#123;</span><br><span class=\"line\">        this.x -= WIDTH</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    this.draw()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义动画</span><br><span class=\"line\">function animate() &#123;</span><br><span class=\"line\">    context.clearRect(0, 0, WIDTH, HEIGHT);</span><br><span class=\"line\">    for (var i in round) &#123;</span><br><span class=\"line\">        round[i].move()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    requestAnimationFrame(animate)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个时候就可以看到动态的一个个小圆点了。</p>\n<p>是不是很炫酷呢，有空我再将它改造得更炫酷一点。</p>\n"},{"title":"神奇的 Canvas 之 Android&iOS","date":"2018-01-11T10:00:00.000Z","_content":"\n最近公司事不多，自从前些天[学习使用 canvas](http://jiayueji.cn/2018/01/08/%E7%A5%9E%E5%A5%87%E7%9A%84canvas/) 之后这几天又抽空实现了几个类似的效果：\n\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/round.gif?raw=true)\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/segment.gif?raw=true)\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/circle.gif?raw=true)\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/line.gif?raw=true)\n\n是用 Vue 实现的，[代码在这里](https://github.com/Charles1198/VueDemo/tree/master/src/components/canvas)，实际效果还是很流畅的，\b只是 .gif 图片看起来有些掉帧。\n\n今天闲来无事就想着将上述效果实现在 Android 和 iOS 上试试看。\n\n# Android\n\n在 Android 中首先想到的就是自定义 View 来实现。首先定义圆点的属性。\n```\npublic class Point {\n    /**\n     * 圆点坐标及半径、透明度（黑色）\n     */\n    private float x;\n    private float y;\n    private float r;\n    private int alpha;\n\n    /**\n     * 圆点横向和纵向移动速度\n     */\n    private float vx = (float) (Math.random() - 0.5);\n    private float vy = (float) Math.random();\n\n    public Point(float x, float y, float r, int alpha) {\n        this.x = x;\n        this.y = y;\n        this.r = r;\n        this.alpha = alpha;\n    }\n\n    // get/set 方法\n}\n```\n自定义 View MovingPointView 继承自 View\n```\npublic class MovingPointView extends View {\n    /**\n     * 画布长宽\n     */\n    private int width;\n    private int height;\n\n    /**\n     * 画笔\n     */\n    private Paint paint;\n\n    /**\n     * 圆点数量\n     */\n    private int pointCount = 1000;\n\n    /**\n     * 圆点数组\n     */\n    private List<Point> pointList = new ArrayList<>();\n}\n```\n创建画笔\n```\nprivate void initPatin() {\n    paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    initTimer();\n}\n```\n在构造方法里调用\n```\npublic MovingPointView(Context context, @Nullable AttributeSet attrs) {\n    super(context, attrs);\n    initPatin();\n}\n```\n接下来创建圆点数组\n```\nprivate void initPoint() {\n    if (pointList.size() > 0) {\n        return;\n    }\n    for (int i = 0; i < pointCount; i++) {\n        Point p = new Point((float) (Math.random() * width), (float) (Math.random() * height),\n                (float) (Math.random() * 15), (int) (Math.random() * 120 + 20));\n        pointList.add(p);\n    }\n}\n```\n由于要保证圆点的坐标在 View 范围之内，所以要等到 onMeasure 方法执行后得到 View 的宽高再创建圆点数组。因为 onMeasure 方法会被执行多次，所以在 initPoint 方法中要判断 pointList 如果已经构造过就不再构造。\n```\n@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    width = this.getMeasuredWidth();\n    height = this.getMeasuredHeight();\n\n    initPoint();\n}\n```\n此时调用 onDraw 方法就可以画出点点啦。\n```\n@Override\nprotected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n\n    for (Point p : pointList) {\n        paint.setARGB(p.getAlpha(), 0, 0, 0);\n        paint.setStrokeWidth(p.getR());\n        canvas.drawCircle(p.getX(), p.getY(), p.getR(), paint);\n    }\n}\n```\n不过这时圆点还是静态的不会动，要让圆点动起来还需要为每一个圆点加上动画......扯淡，并不是。\b跟[《神奇的 Canvas》](http://jiayueji.cn/2018/01/08/%E7%A5%9E%E5%A5%87%E7%9A%84canvas/)这篇文章中一样，我们通过定时改变圆点的坐标并刷新 View 的方法来实现动画。\n\n向 Point 类中加入移动方法：\n```\n/**\n* 移动圆点，范围不超过画布\n*\n* @param width 画布宽\n* @param height 画布高\n*/\npublic void move(int width, int height) {\n    if (x <= 0 || x >= width) {\n        vx = 0 - vx;\n    }\n    if (y <= 0) {\n        y += height;\n    }\n    this.x += vx;\n    this.y -= vy;\n}\n```\n定时使用 Timer\n```\n/**\n* 定时器\n*/\nprivate Timer timer;\n\nprivate void initTimer() {\n    @SuppressLint(\"HandlerLeak\")\n    final Handler mainHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            //刷新 View\n            invalidate();\n        }\n    };\n\n    timer = new Timer();\n    timer.schedule(new TimerTask() {\n        @Override\n        public void run() {\n            //run() 方法执行在非主线程，要刷新 view 要借助 Handler\n            mainHandler.sendMessage(new Message());\n        }\n    }, 60, 60);//延时 60 毫秒，每 60 毫秒执行一次\n}\n```\n记得在 View 被销毁的时候释放定时器\n```\n@Override\nprotected void onDetachedFromWindow() {\n    super.onDetachedFromWindow();\n\n    if (timer != null) {\n        timer.cancel();\n        timer = null;\n    }\n}\n```\n最后在每次画圆点的时候移动一下圆点的位置，这样在下一次画圆点的时候就会有动画效果\n```\n@Override\nprotected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n\n    for (Point p : pointList) {\n        paint.setARGB(p.getAlpha(), 0, 0, 0);\n        paint.setStrokeWidth(p.getR());\n        canvas.drawCircle(p.getX(), p.getY(), p.getR(), paint);\n\n        //每次画完就移动圆点\n        p.move(width, height);\n    }\n}\n```\n最终效果如下：\n\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/view.gif?raw=true)\n\n\b由于是 .gif 图片，看起来会不流畅，其实\b模拟器上还是很流畅的。\n\n此时圆点的数量只有 60 个，当我把圆点的数量调整到 1000 个的时候，动画就有些许的卡顿了，这时我想到了 SurfaceView。将 MovingPointView 的父类换成 SurfaceView 会流畅很多，但是这不是本文的重点就不展开了，代码在[这里](https://github.com/Charles1198/AppForLearn-android/blob/master/app/src/main/java/com/bqteam/appforlearn/function/canvas/MovingPointSurfaceView.java)。\n\n\n# iOS\n\n由于在 iOS 上的实现方式跟 Android 很类似，代码我就不贴了，在[这里](https://github.com/Charles1198/AppForLearn-iOS/blob/master/AppForLearn/functions/MovingPointView.swift)就可以找到。\n\n最后实现效果\n\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/ios.gif?raw=true)\n","source":"_posts/神奇的canvas之Android&iOS.md","raw":"---\ntitle: 神奇的 Canvas 之 Android&iOS\ndate: 2018-1-11 18:00:00\ntags:\n---\n\n最近公司事不多，自从前些天[学习使用 canvas](http://jiayueji.cn/2018/01/08/%E7%A5%9E%E5%A5%87%E7%9A%84canvas/) 之后这几天又抽空实现了几个类似的效果：\n\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/round.gif?raw=true)\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/segment.gif?raw=true)\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/circle.gif?raw=true)\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/line.gif?raw=true)\n\n是用 Vue 实现的，[代码在这里](https://github.com/Charles1198/VueDemo/tree/master/src/components/canvas)，实际效果还是很流畅的，\b只是 .gif 图片看起来有些掉帧。\n\n今天闲来无事就想着将上述效果实现在 Android 和 iOS 上试试看。\n\n# Android\n\n在 Android 中首先想到的就是自定义 View 来实现。首先定义圆点的属性。\n```\npublic class Point {\n    /**\n     * 圆点坐标及半径、透明度（黑色）\n     */\n    private float x;\n    private float y;\n    private float r;\n    private int alpha;\n\n    /**\n     * 圆点横向和纵向移动速度\n     */\n    private float vx = (float) (Math.random() - 0.5);\n    private float vy = (float) Math.random();\n\n    public Point(float x, float y, float r, int alpha) {\n        this.x = x;\n        this.y = y;\n        this.r = r;\n        this.alpha = alpha;\n    }\n\n    // get/set 方法\n}\n```\n自定义 View MovingPointView 继承自 View\n```\npublic class MovingPointView extends View {\n    /**\n     * 画布长宽\n     */\n    private int width;\n    private int height;\n\n    /**\n     * 画笔\n     */\n    private Paint paint;\n\n    /**\n     * 圆点数量\n     */\n    private int pointCount = 1000;\n\n    /**\n     * 圆点数组\n     */\n    private List<Point> pointList = new ArrayList<>();\n}\n```\n创建画笔\n```\nprivate void initPatin() {\n    paint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    initTimer();\n}\n```\n在构造方法里调用\n```\npublic MovingPointView(Context context, @Nullable AttributeSet attrs) {\n    super(context, attrs);\n    initPatin();\n}\n```\n接下来创建圆点数组\n```\nprivate void initPoint() {\n    if (pointList.size() > 0) {\n        return;\n    }\n    for (int i = 0; i < pointCount; i++) {\n        Point p = new Point((float) (Math.random() * width), (float) (Math.random() * height),\n                (float) (Math.random() * 15), (int) (Math.random() * 120 + 20));\n        pointList.add(p);\n    }\n}\n```\n由于要保证圆点的坐标在 View 范围之内，所以要等到 onMeasure 方法执行后得到 View 的宽高再创建圆点数组。因为 onMeasure 方法会被执行多次，所以在 initPoint 方法中要判断 pointList 如果已经构造过就不再构造。\n```\n@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    width = this.getMeasuredWidth();\n    height = this.getMeasuredHeight();\n\n    initPoint();\n}\n```\n此时调用 onDraw 方法就可以画出点点啦。\n```\n@Override\nprotected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n\n    for (Point p : pointList) {\n        paint.setARGB(p.getAlpha(), 0, 0, 0);\n        paint.setStrokeWidth(p.getR());\n        canvas.drawCircle(p.getX(), p.getY(), p.getR(), paint);\n    }\n}\n```\n不过这时圆点还是静态的不会动，要让圆点动起来还需要为每一个圆点加上动画......扯淡，并不是。\b跟[《神奇的 Canvas》](http://jiayueji.cn/2018/01/08/%E7%A5%9E%E5%A5%87%E7%9A%84canvas/)这篇文章中一样，我们通过定时改变圆点的坐标并刷新 View 的方法来实现动画。\n\n向 Point 类中加入移动方法：\n```\n/**\n* 移动圆点，范围不超过画布\n*\n* @param width 画布宽\n* @param height 画布高\n*/\npublic void move(int width, int height) {\n    if (x <= 0 || x >= width) {\n        vx = 0 - vx;\n    }\n    if (y <= 0) {\n        y += height;\n    }\n    this.x += vx;\n    this.y -= vy;\n}\n```\n定时使用 Timer\n```\n/**\n* 定时器\n*/\nprivate Timer timer;\n\nprivate void initTimer() {\n    @SuppressLint(\"HandlerLeak\")\n    final Handler mainHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            //刷新 View\n            invalidate();\n        }\n    };\n\n    timer = new Timer();\n    timer.schedule(new TimerTask() {\n        @Override\n        public void run() {\n            //run() 方法执行在非主线程，要刷新 view 要借助 Handler\n            mainHandler.sendMessage(new Message());\n        }\n    }, 60, 60);//延时 60 毫秒，每 60 毫秒执行一次\n}\n```\n记得在 View 被销毁的时候释放定时器\n```\n@Override\nprotected void onDetachedFromWindow() {\n    super.onDetachedFromWindow();\n\n    if (timer != null) {\n        timer.cancel();\n        timer = null;\n    }\n}\n```\n最后在每次画圆点的时候移动一下圆点的位置，这样在下一次画圆点的时候就会有动画效果\n```\n@Override\nprotected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n\n    for (Point p : pointList) {\n        paint.setARGB(p.getAlpha(), 0, 0, 0);\n        paint.setStrokeWidth(p.getR());\n        canvas.drawCircle(p.getX(), p.getY(), p.getR(), paint);\n\n        //每次画完就移动圆点\n        p.move(width, height);\n    }\n}\n```\n最终效果如下：\n\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/view.gif?raw=true)\n\n\b由于是 .gif 图片，看起来会不流畅，其实\b模拟器上还是很流畅的。\n\n此时圆点的数量只有 60 个，当我把圆点的数量调整到 1000 个的时候，动画就有些许的卡顿了，这时我想到了 SurfaceView。将 MovingPointView 的父类换成 SurfaceView 会流畅很多，但是这不是本文的重点就不展开了，代码在[这里](https://github.com/Charles1198/AppForLearn-android/blob/master/app/src/main/java/com/bqteam/appforlearn/function/canvas/MovingPointSurfaceView.java)。\n\n\n# iOS\n\n由于在 iOS 上的实现方式跟 Android 很类似，代码我就不贴了，在[这里](https://github.com/Charles1198/AppForLearn-iOS/blob/master/AppForLearn/functions/MovingPointView.swift)就可以找到。\n\n最后实现效果\n\n![](https://github.com/Charles1198/Charles1198.github.io/blob/master/image/ios.gif?raw=true)\n","slug":"神奇的canvas之Android&iOS","published":1,"updated":"2018-01-17T11:56:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcj0jieu0004m5sa7rr64a2j","content":"<p>最近公司事不多，自从前些天<a href=\"http://jiayueji.cn/2018/01/08/%E7%A5%9E%E5%A5%87%E7%9A%84canvas/\" target=\"_blank\" rel=\"noopener\">学习使用 canvas</a> 之后这几天又抽空实现了几个类似的效果：</p>\n<p><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/round.gif?raw=true\" alt=\"\"><br><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/segment.gif?raw=true\" alt=\"\"><br><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/circle.gif?raw=true\" alt=\"\"><br><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/line.gif?raw=true\" alt=\"\"></p>\n<p>是用 Vue 实现的，<a href=\"https://github.com/Charles1198/VueDemo/tree/master/src/components/canvas\" target=\"_blank\" rel=\"noopener\">代码在这里</a>，实际效果还是很流畅的，\b只是 .gif 图片看起来有些掉帧。</p>\n<p>今天闲来无事就想着将上述效果实现在 Android 和 iOS 上试试看。</p>\n<h1 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h1><p>在 Android 中首先想到的就是自定义 View 来实现。首先定义圆点的属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Point &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 圆点坐标及半径、透明度（黑色）</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private float x;</span><br><span class=\"line\">    private float y;</span><br><span class=\"line\">    private float r;</span><br><span class=\"line\">    private int alpha;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 圆点横向和纵向移动速度</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private float vx = (float) (Math.random() - 0.5);</span><br><span class=\"line\">    private float vy = (float) Math.random();</span><br><span class=\"line\"></span><br><span class=\"line\">    public Point(float x, float y, float r, int alpha) &#123;</span><br><span class=\"line\">        this.x = x;</span><br><span class=\"line\">        this.y = y;</span><br><span class=\"line\">        this.r = r;</span><br><span class=\"line\">        this.alpha = alpha;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // get/set 方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>自定义 View MovingPointView 继承自 View<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MovingPointView extends View &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 画布长宽</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private int width;</span><br><span class=\"line\">    private int height;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 画笔</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Paint paint;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 圆点数量</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private int pointCount = 1000;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 圆点数组</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private List&lt;Point&gt; pointList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>创建画笔<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void initPatin() &#123;</span><br><span class=\"line\">    paint = new Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class=\"line\">    initTimer();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在构造方法里调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public MovingPointView(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class=\"line\">    super(context, attrs);</span><br><span class=\"line\">    initPatin();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来创建圆点数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void initPoint() &#123;</span><br><span class=\"line\">    if (pointList.size() &gt; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int i = 0; i &lt; pointCount; i++) &#123;</span><br><span class=\"line\">        Point p = new Point((float) (Math.random() * width), (float) (Math.random() * height),</span><br><span class=\"line\">                (float) (Math.random() * 15), (int) (Math.random() * 120 + 20));</span><br><span class=\"line\">        pointList.add(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于要保证圆点的坐标在 View 范围之内，所以要等到 onMeasure 方法执行后得到 View 的宽高再创建圆点数组。因为 onMeasure 方法会被执行多次，所以在 initPoint 方法中要判断 pointList 如果已经构造过就不再构造。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class=\"line\">    super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">    width = this.getMeasuredWidth();</span><br><span class=\"line\">    height = this.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">    initPoint();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时调用 onDraw 方法就可以画出点点啦。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected void onDraw(Canvas canvas) &#123;</span><br><span class=\"line\">    super.onDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (Point p : pointList) &#123;</span><br><span class=\"line\">        paint.setARGB(p.getAlpha(), 0, 0, 0);</span><br><span class=\"line\">        paint.setStrokeWidth(p.getR());</span><br><span class=\"line\">        canvas.drawCircle(p.getX(), p.getY(), p.getR(), paint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不过这时圆点还是静态的不会动，要让圆点动起来还需要为每一个圆点加上动画……扯淡，并不是。\b跟<a href=\"http://jiayueji.cn/2018/01/08/%E7%A5%9E%E5%A5%87%E7%9A%84canvas/\" target=\"_blank\" rel=\"noopener\">《神奇的 Canvas》</a>这篇文章中一样，我们通过定时改变圆点的坐标并刷新 View 的方法来实现动画。</p>\n<p>向 Point 类中加入移动方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* 移动圆点，范围不超过画布</span><br><span class=\"line\">*</span><br><span class=\"line\">* @param width 画布宽</span><br><span class=\"line\">* @param height 画布高</span><br><span class=\"line\">*/</span><br><span class=\"line\">public void move(int width, int height) &#123;</span><br><span class=\"line\">    if (x &lt;= 0 || x &gt;= width) &#123;</span><br><span class=\"line\">        vx = 0 - vx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (y &lt;= 0) &#123;</span><br><span class=\"line\">        y += height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.x += vx;</span><br><span class=\"line\">    this.y -= vy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定时使用 Timer<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* 定时器</span><br><span class=\"line\">*/</span><br><span class=\"line\">private Timer timer;</span><br><span class=\"line\"></span><br><span class=\"line\">private void initTimer() &#123;</span><br><span class=\"line\">    @SuppressLint(&quot;HandlerLeak&quot;)</span><br><span class=\"line\">    final Handler mainHandler = new Handler() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void handleMessage(Message msg) &#123;</span><br><span class=\"line\">            //刷新 View</span><br><span class=\"line\">            invalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    timer = new Timer();</span><br><span class=\"line\">    timer.schedule(new TimerTask() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            //run() 方法执行在非主线程，要刷新 view 要借助 Handler</span><br><span class=\"line\">            mainHandler.sendMessage(new Message());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, 60, 60);//延时 60 毫秒，每 60 毫秒执行一次</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>记得在 View 被销毁的时候释放定时器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected void onDetachedFromWindow() &#123;</span><br><span class=\"line\">    super.onDetachedFromWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (timer != null) &#123;</span><br><span class=\"line\">        timer.cancel();</span><br><span class=\"line\">        timer = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后在每次画圆点的时候移动一下圆点的位置，这样在下一次画圆点的时候就会有动画效果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected void onDraw(Canvas canvas) &#123;</span><br><span class=\"line\">    super.onDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (Point p : pointList) &#123;</span><br><span class=\"line\">        paint.setARGB(p.getAlpha(), 0, 0, 0);</span><br><span class=\"line\">        paint.setStrokeWidth(p.getR());</span><br><span class=\"line\">        canvas.drawCircle(p.getX(), p.getY(), p.getR(), paint);</span><br><span class=\"line\"></span><br><span class=\"line\">        //每次画完就移动圆点</span><br><span class=\"line\">        p.move(width, height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终效果如下：</p>\n<p><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/view.gif?raw=true\" alt=\"\"></p>\n<p>\b由于是 .gif 图片，看起来会不流畅，其实\b模拟器上还是很流畅的。</p>\n<p>此时圆点的数量只有 60 个，当我把圆点的数量调整到 1000 个的时候，动画就有些许的卡顿了，这时我想到了 SurfaceView。将 MovingPointView 的父类换成 SurfaceView 会流畅很多，但是这不是本文的重点就不展开了，代码在<a href=\"https://github.com/Charles1198/AppForLearn-android/blob/master/app/src/main/java/com/bqteam/appforlearn/function/canvas/MovingPointSurfaceView.java\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h1 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h1><p>由于在 iOS 上的实现方式跟 Android 很类似，代码我就不贴了，在<a href=\"https://github.com/Charles1198/AppForLearn-iOS/blob/master/AppForLearn/functions/MovingPointView.swift\" target=\"_blank\" rel=\"noopener\">这里</a>就可以找到。</p>\n<p>最后实现效果</p>\n<p><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/ios.gif?raw=true\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近公司事不多，自从前些天<a href=\"http://jiayueji.cn/2018/01/08/%E7%A5%9E%E5%A5%87%E7%9A%84canvas/\" target=\"_blank\" rel=\"noopener\">学习使用 canvas</a> 之后这几天又抽空实现了几个类似的效果：</p>\n<p><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/round.gif?raw=true\" alt=\"\"><br><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/segment.gif?raw=true\" alt=\"\"><br><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/circle.gif?raw=true\" alt=\"\"><br><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/line.gif?raw=true\" alt=\"\"></p>\n<p>是用 Vue 实现的，<a href=\"https://github.com/Charles1198/VueDemo/tree/master/src/components/canvas\" target=\"_blank\" rel=\"noopener\">代码在这里</a>，实际效果还是很流畅的，\b只是 .gif 图片看起来有些掉帧。</p>\n<p>今天闲来无事就想着将上述效果实现在 Android 和 iOS 上试试看。</p>\n<h1 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h1><p>在 Android 中首先想到的就是自定义 View 来实现。首先定义圆点的属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Point &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 圆点坐标及半径、透明度（黑色）</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private float x;</span><br><span class=\"line\">    private float y;</span><br><span class=\"line\">    private float r;</span><br><span class=\"line\">    private int alpha;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 圆点横向和纵向移动速度</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private float vx = (float) (Math.random() - 0.5);</span><br><span class=\"line\">    private float vy = (float) Math.random();</span><br><span class=\"line\"></span><br><span class=\"line\">    public Point(float x, float y, float r, int alpha) &#123;</span><br><span class=\"line\">        this.x = x;</span><br><span class=\"line\">        this.y = y;</span><br><span class=\"line\">        this.r = r;</span><br><span class=\"line\">        this.alpha = alpha;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // get/set 方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>自定义 View MovingPointView 继承自 View<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MovingPointView extends View &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 画布长宽</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private int width;</span><br><span class=\"line\">    private int height;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 画笔</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Paint paint;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 圆点数量</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private int pointCount = 1000;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 圆点数组</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private List&lt;Point&gt; pointList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>创建画笔<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void initPatin() &#123;</span><br><span class=\"line\">    paint = new Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class=\"line\">    initTimer();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在构造方法里调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public MovingPointView(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class=\"line\">    super(context, attrs);</span><br><span class=\"line\">    initPatin();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来创建圆点数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void initPoint() &#123;</span><br><span class=\"line\">    if (pointList.size() &gt; 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (int i = 0; i &lt; pointCount; i++) &#123;</span><br><span class=\"line\">        Point p = new Point((float) (Math.random() * width), (float) (Math.random() * height),</span><br><span class=\"line\">                (float) (Math.random() * 15), (int) (Math.random() * 120 + 20));</span><br><span class=\"line\">        pointList.add(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于要保证圆点的坐标在 View 范围之内，所以要等到 onMeasure 方法执行后得到 View 的宽高再创建圆点数组。因为 onMeasure 方法会被执行多次，所以在 initPoint 方法中要判断 pointList 如果已经构造过就不再构造。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class=\"line\">    super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">    width = this.getMeasuredWidth();</span><br><span class=\"line\">    height = this.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">    initPoint();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时调用 onDraw 方法就可以画出点点啦。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected void onDraw(Canvas canvas) &#123;</span><br><span class=\"line\">    super.onDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (Point p : pointList) &#123;</span><br><span class=\"line\">        paint.setARGB(p.getAlpha(), 0, 0, 0);</span><br><span class=\"line\">        paint.setStrokeWidth(p.getR());</span><br><span class=\"line\">        canvas.drawCircle(p.getX(), p.getY(), p.getR(), paint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>不过这时圆点还是静态的不会动，要让圆点动起来还需要为每一个圆点加上动画……扯淡，并不是。\b跟<a href=\"http://jiayueji.cn/2018/01/08/%E7%A5%9E%E5%A5%87%E7%9A%84canvas/\" target=\"_blank\" rel=\"noopener\">《神奇的 Canvas》</a>这篇文章中一样，我们通过定时改变圆点的坐标并刷新 View 的方法来实现动画。</p>\n<p>向 Point 类中加入移动方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* 移动圆点，范围不超过画布</span><br><span class=\"line\">*</span><br><span class=\"line\">* @param width 画布宽</span><br><span class=\"line\">* @param height 画布高</span><br><span class=\"line\">*/</span><br><span class=\"line\">public void move(int width, int height) &#123;</span><br><span class=\"line\">    if (x &lt;= 0 || x &gt;= width) &#123;</span><br><span class=\"line\">        vx = 0 - vx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (y &lt;= 0) &#123;</span><br><span class=\"line\">        y += height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.x += vx;</span><br><span class=\"line\">    this.y -= vy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定时使用 Timer<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* 定时器</span><br><span class=\"line\">*/</span><br><span class=\"line\">private Timer timer;</span><br><span class=\"line\"></span><br><span class=\"line\">private void initTimer() &#123;</span><br><span class=\"line\">    @SuppressLint(&quot;HandlerLeak&quot;)</span><br><span class=\"line\">    final Handler mainHandler = new Handler() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void handleMessage(Message msg) &#123;</span><br><span class=\"line\">            //刷新 View</span><br><span class=\"line\">            invalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    timer = new Timer();</span><br><span class=\"line\">    timer.schedule(new TimerTask() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            //run() 方法执行在非主线程，要刷新 view 要借助 Handler</span><br><span class=\"line\">            mainHandler.sendMessage(new Message());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, 60, 60);//延时 60 毫秒，每 60 毫秒执行一次</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>记得在 View 被销毁的时候释放定时器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected void onDetachedFromWindow() &#123;</span><br><span class=\"line\">    super.onDetachedFromWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (timer != null) &#123;</span><br><span class=\"line\">        timer.cancel();</span><br><span class=\"line\">        timer = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后在每次画圆点的时候移动一下圆点的位置，这样在下一次画圆点的时候就会有动画效果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected void onDraw(Canvas canvas) &#123;</span><br><span class=\"line\">    super.onDraw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">    for (Point p : pointList) &#123;</span><br><span class=\"line\">        paint.setARGB(p.getAlpha(), 0, 0, 0);</span><br><span class=\"line\">        paint.setStrokeWidth(p.getR());</span><br><span class=\"line\">        canvas.drawCircle(p.getX(), p.getY(), p.getR(), paint);</span><br><span class=\"line\"></span><br><span class=\"line\">        //每次画完就移动圆点</span><br><span class=\"line\">        p.move(width, height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终效果如下：</p>\n<p><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/view.gif?raw=true\" alt=\"\"></p>\n<p>\b由于是 .gif 图片，看起来会不流畅，其实\b模拟器上还是很流畅的。</p>\n<p>此时圆点的数量只有 60 个，当我把圆点的数量调整到 1000 个的时候，动画就有些许的卡顿了，这时我想到了 SurfaceView。将 MovingPointView 的父类换成 SurfaceView 会流畅很多，但是这不是本文的重点就不展开了，代码在<a href=\"https://github.com/Charles1198/AppForLearn-android/blob/master/app/src/main/java/com/bqteam/appforlearn/function/canvas/MovingPointSurfaceView.java\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<h1 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h1><p>由于在 iOS 上的实现方式跟 Android 很类似，代码我就不贴了，在<a href=\"https://github.com/Charles1198/AppForLearn-iOS/blob/master/AppForLearn/functions/MovingPointView.swift\" target=\"_blank\" rel=\"noopener\">这里</a>就可以找到。</p>\n<p>最后实现效果</p>\n<p><img src=\"https://github.com/Charles1198/Charles1198.github.io/blob/master/image/ios.gif?raw=true\" alt=\"\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}